// node_modules/phaser3-rex-plugins/plugins/utils/object/SetValue.js
var IsInValidKey = function(keys) {
  return keys == null || keys === "" || keys.length === 0;
};
var GetEntry = function(target, keys, defaultEntry) {
  var entry = target;
  if (IsInValidKey(keys)) {
  } else {
    if (typeof keys === "string") {
      keys = keys.split(".");
    }
    var key;
    for (var i = 0, cnt = keys.length; i < cnt; i++) {
      key = keys[i];
      if (entry[key] == null || typeof entry[key] !== "object") {
        var newEntry;
        if (i === cnt - 1) {
          if (defaultEntry === void 0) {
            newEntry = {};
          } else {
            newEntry = defaultEntry;
          }
        } else {
          newEntry = {};
        }
        entry[key] = newEntry;
      }
      entry = entry[key];
    }
  }
  return entry;
};
var SetValue = function(target, keys, value, delimiter) {
  if (delimiter === void 0) {
    delimiter = ".";
  }
  if (typeof target !== "object") {
    return;
  } else if (IsInValidKey(keys)) {
    if (value == null) {
      return;
    } else if (typeof value === "object") {
      target = value;
    }
  } else {
    if (typeof keys === "string") {
      keys = keys.split(delimiter);
    }
    var lastKey = keys.pop();
    var entry = GetEntry(target, keys);
    entry[lastKey] = value;
  }
  return target;
};
var SetValue_default = SetValue;

// node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/Resize.js
var Resize = function(width, height) {
  if (this.scene.sys.scale.autoRound) {
    width = Math.floor(width);
    height = Math.floor(height);
  }
  if (this.width === width && this.height === height) {
    return this;
  }
  var style = this.node.style;
  style.width = `${width}px`;
  style.height = `${height}px`;
  this.updateSize();
  return this;
};
var Resize_default = Resize;

// node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/inputtext/InputTextProperties.js
var ElementProperties = {
  id: ["id", void 0],
  text: ["value", void 0],
  maxLength: ["maxLength", void 0],
  minLength: ["minLength", void 0],
  placeholder: ["placeholder", void 0],
  tooltip: ["title", void 0],
  readOnly: ["readOnly", false],
  spellCheck: ["spellcheck", false],
  autoComplete: ["autocomplete", "off"],
  autoCapitalize: ["autocapitalize", "off"]
};
var StyleProperties = {
  align: ["textAlign", void 0],
  paddingLeft: ["padding-left", void 0],
  paddingRight: ["padding-right", void 0],
  paddingTop: ["padding-top", void 0],
  paddingBottom: ["padding-bottom", void 0],
  fontFamily: ["fontFamily", void 0],
  fontSize: ["font-size", void 0],
  color: ["color", "#ffffff"],
  backgroundColor: ["backgroundColor", "transparent"],
  border: ["border", 0],
  borderColor: ["borderColor", "transparent"],
  borderRadius: ["border-radius", void 0],
  outline: ["outline", "none"],
  direction: ["direction", void 0]
};
var ElementEvents = {
  input: "textchange",
  click: "click",
  dblclick: "dblclick",
  mousedown: "pointerdown",
  mousemove: "pointermove",
  mouseup: "pointerup",
  touchstart: "pointerdown",
  touchmove: "pointermove",
  touchend: "pointerup",
  keydown: "keydown",
  keyup: "keyup",
  keypress: "keypress",
  compositionstart: "compositionStart",
  compositionend: "compositionEnd",
  compositionupdate: "compositionUpdate",
  focus: "focus",
  blur: "blur",
  select: "select"
};

// node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/SetProperties.js
var GetValue = Phaser.Utils.Objects.GetValue;
var SetProperties = function(properties, config, out) {
  if (out === void 0) {
    out = {};
  }
  var property, value;
  for (var key in properties) {
    property = properties[key];
    value = GetValue(config, key, property[1]);
    if (value !== void 0) {
      out[property[0]] = value;
    }
  }
  return out;
};
var SetProperties_default = SetProperties;

// node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/RouteEvents.js
var GetValue2 = Phaser.Utils.Objects.GetValue;
var RouteEvents = function(gameObject, element, elementEvents, config) {
  var preventDefault = GetValue2(config, "preventDefault", false);
  var preTest = GetValue2(config, "preTest");
  for (let elementEventName in elementEvents) {
    element.addEventListener(elementEventName, function(e) {
      if (!preTest || preTest(gameObject, elementEventName)) {
        gameObject.emit(elementEvents[elementEventName], gameObject, e);
      }
      if (preventDefault) {
        e.preventDefault();
      }
    });
  }
};
var RouteEvents_default = RouteEvents;

// node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/utils/StopPropagationTouchEvents.js
var StopPropagationTouchEvents = function(element) {
  element.addEventListener("touchstart", callback, false);
  element.addEventListener("touchmove", callback, false);
  element.addEventListener("touchend", callback, false);
  element.addEventListener("mousedown", callback, false);
  element.addEventListener("mouseup", callback, false);
  element.addEventListener("mousemove", callback, false);
};
var callback = function(e) {
  e.stopPropagation();
};
var StopPropagationTouchEvents_default = StopPropagationTouchEvents;

// node_modules/phaser3-rex-plugins/plugins/gameobjects/dom/inputtext/InputText.js
var DOMElement = Phaser.GameObjects.DOMElement;
var IsPlainObject = Phaser.Utils.Objects.IsPlainObject;
var GetValue3 = Phaser.Utils.Objects.GetValue;
var InputText = class extends DOMElement {
  constructor(scene, x, y, width, height, config) {
    if (IsPlainObject(x)) {
      config = x;
      x = GetValue3(config, "x", 0);
      y = GetValue3(config, "y", 0);
      width = GetValue3(config, "width", 0);
      height = GetValue3(config, "height", 0);
    } else if (IsPlainObject(width)) {
      config = width;
      width = GetValue3(config, "width", 0);
      height = GetValue3(config, "height", 0);
    }
    if (config === void 0) {
      config = {};
    }
    var element;
    var textType = GetValue3(config, "inputType", void 0);
    if (textType === void 0) {
      textType = GetValue3(config, "type", "text");
    }
    if (textType === "textarea") {
      element = document.createElement("textarea");
      element.style.resize = "none";
    } else {
      element = document.createElement("input");
      element.type = textType;
    }
    SetProperties_default(ElementProperties, config, element);
    var style = GetValue3(config, "style", void 0);
    style = SetProperties_default(StyleProperties, config, style);
    var elementStyle = element.style;
    for (var key in config) {
      if (key in ElementProperties || key in StyleProperties) {
        continue;
      } else if (key in elementStyle) {
        style[key] = config[key];
      } else if (key in element) {
        if (key === "type") {
          continue;
        }
        element[key] = config[key];
      }
    }
    style["box-sizing"] = "border-box";
    super(scene, x, y, element, style);
    this.type = "rexInputText";
    this.resize(width, height);
    RouteEvents_default(this, element, ElementEvents);
    StopPropagationTouchEvents_default(element);
    if (GetValue3(config, "selectAll", false)) {
      this.selectAll();
    }
    this._isFocused = false;
    this.on("focus", function() {
      this._isFocused = true;
    }, this).on("blur", function() {
      this._isFocused = false;
    }, this);
  }
  get inputType() {
    if (this.node.tagName.toLowerCase() === "textarea") {
      return "textarea";
    } else {
      return this.node.type;
    }
  }
  get text() {
    return this.node.value;
  }
  set text(value) {
    this.node.value = value;
  }
  setText(value) {
    this.text = value;
    return this;
  }
  get maxLength() {
    return this.node.maxLength;
  }
  set maxLength(value) {
    this.node.maxLength = value;
  }
  setMaxLength(value) {
    this.maxLength = value;
    return this;
  }
  get minLength() {
    return this.node.minLength;
  }
  set minLength(value) {
    this.node.minLength = value;
  }
  setMinLength(value) {
    this.minLength = value;
    return this;
  }
  get placeholder() {
    return this.node.placeholder;
  }
  set placeholder(value) {
    this.node.placeholder = value;
  }
  setPlaceholder(value) {
    this.placeholder = value;
    return this;
  }
  selectText(selectionStart, selectionEnd) {
    if (selectionStart === void 0) {
      this.node.select();
    } else {
      this.node.setSelectionRange(selectionStart, selectionEnd);
    }
    return this;
  }
  selectAll() {
    this.selectText();
    return this;
  }
  get selectionStart() {
    return this.node.selectionStart;
  }
  get selectionEnd() {
    return this.node.selectionEnd;
  }
  get selectedText() {
    var node = this.node;
    return node.value.substring(node.selectionStart, node.selectionEnd);
  }
  get cursorPosition() {
    return this.node.selectionStart;
  }
  set cursorPosition(value) {
    this.node.setSelectionRange(value, value);
  }
  setCursorPosition(value) {
    if (value === void 0) {
      value = this.text.length;
    } else if (value < 0) {
      value = this.text.length + value;
    }
    this.cursorPosition = value;
    return this;
  }
  get tooltip() {
    return this.node.title;
  }
  set tooltip(value) {
    this.node.title = value;
  }
  setTooltip(value) {
    this.tooltip = value;
    return this;
  }
  setTextChangedCallback(callback2) {
    this.onTextChanged = callback2;
    return this;
  }
  get readOnly() {
    return this.node.readOnly;
  }
  set readOnly(value) {
    this.node.readOnly = value;
  }
  setReadOnly(value) {
    if (value === void 0) {
      value = true;
    }
    this.readOnly = value;
    return this;
  }
  get spellCheck() {
    return this.node.spellcheck;
  }
  set spellCheck(value) {
    this.node.spellcheck = value;
  }
  setSpellCheck(value) {
    this.spellCheck = value;
    return this;
  }
  get fontColor() {
    return this.node.style.color;
  }
  set fontColor(value) {
    this.node.style.color = value;
  }
  setFontColor(value) {
    this.fontColor = value;
    return this;
  }
  setStyle(key, value) {
    this.node.style[key] = value;
    return this;
  }
  getStyle(key) {
    return this.node.style[key];
  }
  scrollToBottom() {
    this.node.scrollTop = this.node.scrollHeight;
    return this;
  }
  setEnabled(enabled) {
    if (enabled === void 0) {
      enabled = true;
    }
    this.node.disabled = !enabled;
    return this;
  }
  setBlur() {
    this.node.blur();
    return this;
  }
  setFocus() {
    this.node.focus();
    return this;
  }
  get isFocused() {
    return this._isFocused;
  }
};
var methods = {
  resize: Resize_default
};
Object.assign(
  InputText.prototype,
  methods
);
var InputText_default = InputText;

export {
  SetValue_default,
  SetProperties_default,
  StopPropagationTouchEvents_default,
  Resize_default,
  RouteEvents_default,
  InputText_default
};
//# sourceMappingURL=chunk-L3QQAAB7.js.map
